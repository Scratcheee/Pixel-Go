{"version":3,"sources":["components/Pixel.js","components/Row.js","components/DrawingPanel.js","components/Editor.js","images/mainscreen.png","components/LaunchPage.js","App.js","reportWebVitals.js","index.js"],"names":["Pixel","props","selectedColor","useState","pixelColor","setPixelColor","oldColor","setOldColor","canChangeColor","setCanChangeColor","className","style","backgroundColor","onClick","onMouseEnter","onMouseLeave","Row","width","pixels","i","push","DrawingPanel","height","panelRef","useRef","rows","id","ref","exportComponentAsPNG","Editor","panelWidth","setPanelWidth","panelHeight","setPanelHeight","hideOptions","setHideOptions","hideDrawingPanel","setHideDrawingPanel","buttonText","setButtonText","setColor","penColor","setPenColor","type","defaultValue","onChange","e","target","value","color","onChangeComplete","hex","variant","size","LaunchPage","src","demoScreen","alt","icon","faReact","faSass","faJsSquare","faBootstrap","startEditor","a","href","rel","faGithubSquare","faLinkedin","App","editing","setEditing","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dfa76c54.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport \"../scss/custom.scss\"\r\n\r\n\r\nfunction Pixel(props) {\r\n    const {selectedColor} = props\r\n    const [pixelColor, setPixelColor] = useState('#fff')\r\n    const [oldColor, setOldColor] = useState(pixelColor)\r\n    const [canChangeColor, setCanChangeColor] = useState(true)\r\n\r\n\r\n    \r\n    const applyColor = () => {\r\n        setPixelColor(selectedColor)\r\n        setCanChangeColor(false)\r\n    }\r\n\r\n    const changeColorOnhover = () => {\r\n        setOldColor(pixelColor)\r\n        setPixelColor(selectedColor)\r\n    }\r\n\r\n    const resetColor = () => {\r\n        if(canChangeColor) {\r\n            setPixelColor(oldColor)\r\n        \r\n        }\r\n        setCanChangeColor(true)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className='pixel' style={{backgroundColor: pixelColor}} onClick={applyColor} onMouseEnter={changeColorOnhover} onMouseLeave={resetColor}>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pixel\r\n","import React from 'react'\r\nimport \"../scss/custom.scss\"\r\n\r\nimport Pixel from './Pixel';\r\n\r\nfunction Row(props) {\r\n    const {width, selectedColor} = props\r\n\r\n    let pixels = [];\r\n\r\n    for (let i = 0; i < width; i++) {\r\n        pixels.push(<Pixel key={i} selectedColor={selectedColor} />);\r\n      }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            {pixels}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","import React, {useRef} from 'react'\r\nimport \"../scss/custom.scss\"\r\n\r\nimport Row from './Row'\r\nimport {exportComponentAsPNG} from 'react-component-export-image'\r\n\r\nfunction DrawingPanel(props) {\r\n    const {width, height, selectedColor} = props\r\n\r\n    const panelRef = useRef()\r\n\r\n    let rows = []\r\n    \r\n    //Create an amount of rows of pixels to match the chosen height of the canvas\r\n    for (let i = 0; i < height; i++) {\r\n        rows.push(<Row key={i} width={width} selectedColor={selectedColor} />)\r\n    }\r\n\r\n    return (\r\n        <div id='drawingPanel'>\r\n           <div id=\"pixels\" ref={panelRef}>\r\n               {rows}\r\n           </div>\r\n           <button className=\"button\" onClick={() => exportComponentAsPNG(panelRef)}>Export as PNG</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DrawingPanel\r\n","import React, { useState } from \"react\";\r\nimport \"../scss/custom.scss\";\r\n\r\nimport { SketchPicker } from \"react-color\";\r\nimport DrawingPanel from \"./DrawingPanel\";\r\nimport { Button } from \"reactstrap\";\r\n\r\nfunction Editor() {\r\n  const [panelWidth, setPanelWidth] = useState(16);\r\n  const [panelHeight, setPanelHeight] = useState(16);\r\n  const [hideOptions, setHideOptions] = useState(false);\r\n  const [hideDrawingPanel, setHideDrawingPanel] = useState(true);\r\n  const [buttonText, setButtonText] = useState(\"start drawing\");\r\n  const [selectedColor, setColor] = useState(\"#f44336\");\r\n  const [penColor, setPenColor] = useState(\"#f44336\")\r\n  const eraser = \"#fff\"\r\n  // const [chosenTool, setChosenTool] = useState(\"\")\r\n\r\n\r\n  //Show drawing panel and hide panel size selection\r\n  const initializeDrawingPanel = () => {\r\n    setHideOptions(!hideOptions);\r\n    setHideDrawingPanel(!hideDrawingPanel);\r\n\r\n    buttonText === \"start drawing\"\r\n      ? setButtonText(\"reset\")\r\n      : setButtonText(\"start drawing\");\r\n  };\r\n\r\n  // Sets pen color to chosen color\r\n  const changeColor = (color) => {\r\n    setPenColor(color.hex)\r\n    setColor(color.hex);\r\n  };\r\n\r\n  //sets current tool as a white (#fff) eraser\r\n  const chooseEraser = () => {\r\n    setColor(eraser)\r\n    \r\n  };\r\n\r\n  //sets current tool back to pen as the previous \r\n\r\n  const choosePen = () => {\r\n    setColor(penColor)\r\n  }\r\n\r\n  return (\r\n    <div id=\"editor\">\r\n      <h1>Go Pixel</h1>\r\n      <div id=\"editorPanel\">\r\n        <div id=\"optionPanel\">\r\n          {hideDrawingPanel && (\r\n            <div id=\"panelSize\">\r\n              <h2>Enter Panel Dimensions</h2>\r\n\r\n              <div id=\"options\">\r\n                <div className=\"option\">\r\n                  <input\r\n                    type=\"number\"\r\n                    className=\"panelInput\"\r\n                    defaultValue={panelWidth}\r\n                    onChange={(e) => {\r\n                      setPanelWidth(e.target.value);\r\n                    }}\r\n                  />\r\n                  <span>Width</span>\r\n                </div>\r\n                <div className=\"option\">\r\n                  <input\r\n                    type=\"number\"\r\n                    className=\"panelInput\"\r\n                    defaultValue={panelHeight}\r\n                    onChange={(e) => {\r\n                      setPanelHeight(e.target.value);\r\n                    }}\r\n                  />\r\n                  <span>Height</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          <div id=\"pixelSize\">\r\n            <h2>Choose a Tool</h2>\r\n\r\n            <Button className=\"toolChange\" onClick={choosePen}>Pen</Button>\r\n\r\n            <Button className=\"toolChange\" onClick={chooseEraser}>\r\n              Eraser\r\n            </Button>\r\n          </div>\r\n          <SketchPicker color={penColor} onChangeComplete={changeColor} />\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={initializeDrawingPanel}\r\n            size={\"large\"}\r\n            className=\"button\"\r\n          >\r\n            {buttonText}\r\n          </Button>\r\n        </div>\r\n\r\n        <div id=\"drawingCanvas\">\r\n          {hideOptions && (\r\n            <DrawingPanel\r\n              width={panelWidth}\r\n              height={panelHeight}\r\n              selectedColor={selectedColor}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Editor;\r\n","export default __webpack_public_path__ + \"static/media/mainscreen.e681c237.png\";","import React from \"react\";\r\nimport \"../scss/custom.scss\";\r\nimport demoScreen from \"../images/mainscreen.png\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faReact,\r\n  faSass,\r\n  faJsSquare,\r\n  faBootstrap,\r\n  faGithubSquare,\r\n  faLinkedin,\r\n} from \"@fortawesome/free-brands-svg-icons\";\r\nimport { Button } from \"reactstrap\";\r\n\r\nconst LaunchPage = (props) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"mainBody\">\r\n        <img src={demoScreen} alt=\"demoImage\" className=\"demoImage\" />\r\n        <div className=\"main\">\r\n          <div className=\"description\">\r\n            <h1>Pixel Go: A basic pixel art editor</h1>\r\n\r\n            <p>\r\n              Pixel Go is a simple pixel art editing program that allows you to\r\n              choose a canvas size and then with point and click controls paint\r\n              any picture you want and then export that image as a PNG file{\" \"}\r\n            </p>\r\n\r\n            <FontAwesomeIcon className=\"icon\" icon={faReact} size=\"5x\" />\r\n            <FontAwesomeIcon className=\"icon\" icon={faSass} size=\"5x\" />\r\n            <FontAwesomeIcon className=\"icon\" icon={faJsSquare} size=\"5x\" />\r\n            <FontAwesomeIcon className=\"icon\" icon={faBootstrap} size=\"5x\" />\r\n          </div>\r\n          <div>\r\n            {\" \"}\r\n            <Button onClick={props.startEditor}>Go To Application</Button>\r\n          </div>\r\n\r\n          <div className=\"externalLinks\">\r\n            <div className=\"social\">\r\n              Check out the code at:\r\n              <a a href=\"https://github.com/Scratcheee/Pixel-Go\" target=\"_blank\" rel=\"noreferrer\">\r\n              <FontAwesomeIcon\r\n                className=\"icon\"\r\n                icon={faGithubSquare}\r\n                size=\"5x\"\r\n              />\r\n              </a>\r\n            </div>\r\n            <div className=\"social\">\r\n              Check out my linkedin at:\r\n              <a href=\"https://www.linkedin.com/in/lawrence-kaul/\" target=\"_blank\" rel=\"noreferrer\">\r\n              <FontAwesomeIcon className=\"icon\" icon={faLinkedin} size=\"5x\" /></a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LaunchPage;\r\n","import \"./scss/custom.scss\"\nimport Editor from \"./components/Editor\";\nimport LaunchPage from \"./components/LaunchPage\";\nimport React, { useState } from \"react\";\n\nfunction App() {\n\n  //Launch the launchpage on startup, switch to the editor when button is pressed on the launch page.\n  const [editing, setEditing] = useState(false)\n  const startEditor = () => { \n    setEditing(true)\n}\n\n  return (\n    <div className=\"App\">\n\n      {editing ? (<Editor />) : (<LaunchPage  startEditor={startEditor} />)}\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}